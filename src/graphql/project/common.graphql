type Project {
  id: ID!
  name: String!
  slug: String!
  users: [User!]!
  client: Client
  budget: Budget
  billing: Billing
  invoice: String
  sections: [Section]
}

type Budget {
  id: ID!
  amount: Int!
  progress: Int!
  type: String
}

type Billing {
  id: ID!
  rate: Int!
  type: String
}

type ProjectResult {
  success: Boolean!
  path: String
  message: String
  result: Project
}

type ProjectResults {
  success: Boolean!
  path: String
  message: String
  results: [Project]!
}

type Query {
  getProjects: ProjectResults!
  getProjectWithTasks: ProjectResults!
  getProject(id: ID!): ProjectResult!
  getProjectBySlug(slug: String!): ProjectResult!
}

type Mutation {
  createProject(name: String!, users: [ID!]!, clientId: ID!): ProjectResult!
  updateProject(id: ID!, name: String, users: [ID]): ProjectResult!
  deleteProject(id: ID!): ProjectResult!
  setProjectBudget(id: ID!, amount: Int!, type: String): ProjectResult!
  deleteProjectBudget(id: ID!): ProjectResult!
  setProjectBilling(id: ID!, rate: Int!, type: String): ProjectResult!
  deleteProjectBilling(id: ID!): ProjectResult!
  reorderTask(sectionId: ID!, from: Int!, to: Int!): Boolean!
  reorderTaskBetweenSections(
    sourceSectionId: ID!
    destinationSectionId: ID!
    from: Int!
    to: Int!
  ): Boolean!
}
